#version: '3.8'
#services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.5.1
#    environment: { ZOOKEEPER_CLIENT_PORT: 2181, ZOOKEEPER_TICK_TIME: 2000 }
#    ports: [ "2181:2181" ]
#  kafka:
#    image: confluentinc/cp-kafka:7.5.1
#    depends_on: [ zookeeper ]
#    ports: [ "9092:9092" ]
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#    volumes:
#      - ./topics.sh:/tmp/topics.sh
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    ports: [ "8083:8083" ]
#    depends_on: [ kafka ]
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#  postgres:
#    image: postgres:15
#    environment:
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_USER: postgres
#      POSTGRES_DB: auction_bidding
#    ports: [ "5432:5432" ]
#    healthcheck:
#      test: ["CMD-SHELL","pg_isready -U postgres"]
#      interval: 5s
#      timeout: 5s
#      retries: 10


version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin_db
      POSTGRES_PASSWORD: swapnilg0712
      POSTGRES_DB: auctiondb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      - kafka
      - postgres
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/auctiondb
      SPRING_DATASOURCE_USERNAME: admin_db
      SPRING_DATASOURCE_PASSWORD: swapnilg0712
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  bidding-service:
    build:
      context: ./services/bidding-service
      dockerfile: Dockerfile
    container_name: bidding-service
    depends_on:
      - kafka
      - postgres
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/auctiondb
      SPRING_DATASOURCE_USERNAME: admin_db
      SPRING_DATASOURCE_PASSWORD: swapnilg0712
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

volumes:
  postgres_data: